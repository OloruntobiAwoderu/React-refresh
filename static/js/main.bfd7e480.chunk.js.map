{"version":3,"sources":["components/card.jsx","components/card-list.jsx","components/searchbox.jsx","App.js","serviceWorker.js","index.js"],"names":["Div","styled","div","Card","props","alt","src","monster","id","name","email","CardList","map","key","input","Input","App","handleChange","e","setState","searchField","target","value","state","monsters","fetch","then","response","json","callback","this","filteredMonsters","filter","toLowerCase","includes","className","type","placeholder","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mtBAGA,IAAMA,EAAMC,IAAOC,IAAV,KAkCMC,EAhBF,SAAAC,GACX,OACE,kBAACJ,EAAD,KACE,yBACEK,IAAI,UACJC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BAGL,4BAAKJ,EAAMG,QAAQE,MACnB,4BACE,2BAAIL,EAAMG,QAAQG,U,2MC3B1B,IAAMV,EAAMC,IAAOC,IAAV,KAmBMS,EAXE,SAAAP,GACf,OACE,6BAEE,kBAAC,EAAD,SAAOA,EAAMG,QAAQK,KAAI,SAAAL,GAAO,OAC5B,kBAAC,EAAD,CAAMM,IAAKN,EAAQC,GAAID,QAASA,U,sNCd5BN,IAAOa,MAAV,K,8NCGX,IAAMC,EAAQd,IAAOa,MAAV,KA2CIE,E,YAhCb,aAAe,IAAD,8BACZ,+CAWFC,aAAe,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAVxD,EAAKC,MAAQ,CACXC,SAAU,GACVJ,YAAa,IAJH,E,iFAOO,IAAD,OAClBK,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAQ,OAAI,EAAKV,SAAS,CAAEK,SAAUK,S,+BAGtC,IAAD,EAC2BC,KAAKP,MAA/BC,EADD,EACCA,SAAUJ,EADX,EACWA,YACZW,EAAmBP,EAASQ,QAAO,SAAAzB,GAAO,OAC9CA,EAAQE,KAAKwB,cAAcC,SAASd,EAAYa,kBAElD,OACE,yBAAKE,UAAU,OACb,kBAAC,EAAD,CACEC,KAAK,SACLC,YAAW,kBACXC,SAAUR,KAAKb,eAGjB,kBAAC,EAAD,CAASV,QAASwB,S,GA3BRQ,IAAMC,WCJJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.bfd7e480.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Div = styled.div`\r\n  margin: 40 40 40;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #95dada;\r\n  border: 1px solid grey;\r\n  border-radius: 5px;\r\n  padding: 25px;\r\n  cursor: pointer;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  backface-visibility: hidden;\r\n  transform: translateZ(0);\r\n  transition: transform 0.25s ease-out;\r\n  &:hover {\r\n    transform: scale(1.05);\r\n  }\r\n`;\r\n\r\nconst Card = props => {\r\n  return (\r\n    <Div>\r\n      <img\r\n        alt=\"monster\"\r\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n      />\r\n\r\n      <h1>{props.monster.name}</h1>\r\n      <h2>\r\n        <p>{props.monster.email}</p>\r\n      </h2>\r\n    </Div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport Card from './card'\r\nimport styled from \"styled-components\";\r\n\r\nconst Div = styled.div`\r\n  padding: 40px 40px 40px 40px;\r\n  margin: 0 auto;\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 1fr;\r\n  grid-gap: 20px;\r\n`;\r\n\r\nconst CardList = props => {\r\n  return (\r\n    <div>\r\n    \r\n      <Div> {props.monster.map(monster => (\r\n          <Card key={monster.id} monster={monster}/>\r\n      ))}</Div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Input = styled.input`\r\n-webkit-appearance: none;\r\n  border: none;\r\n  outline: none;\r\n  padding: 10px;\r\n  width: 150px;\r\n  line-height: 30px;\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nexport const searchBox = ({ placeholder, handleChange }) => \r\n  (<Input type=\"search\" placeholder={placeholder} onChange={handleChange} />\r\n);\r\n\r\n\r\n","import React from \"react\";\nimport Cardist from \"./components/card-list\";\nimport { searchBox } from \"./components/searchbox\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\n\nconst Input = styled.input`\n  -webkit-appearance: none;\n  border: none;\n  outline: none;\n  padding: 10px;\n  width: 150px;\n  line-height: 30px;\n  margin-bottom: 30px;\n`;\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(callback => this.setState({ monsters: callback }));\n  }\n  handleChange = e => this.setState({ searchField: e.target.value });\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <Input\n          type=\"search\"\n          placeholder={`search monsters`}\n          onChange={this.handleChange}\n        />\n\n        <Cardist monster={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}